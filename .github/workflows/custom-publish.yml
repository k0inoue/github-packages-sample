name:  Docker Custom Image Build & Publish

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

    paths:
      - 'docker/custom/**'
      - '.github/workflows/custom-publish.yml'

  # Run tests for any PRs.
  pull_request:
    paths:
      - 'docker/custom/**'
      - '.github/workflows/custom-publish.yml'


env:
  DOCKER_BUILDKIT: 1
  CUSTOM_IMAGE_NAME: gpack-custom
  CUSTOM_DOCKER_FILE: docker/custom/Dockerfile

jobs:

  # Run tests.
  custom-build-test:
    #needs: base-push
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Custom Image Build and Tests
        run: |
            # build base image
            docker build . --file $CUSTOM_DOCKER_FILE --tag $CUSTOM_IMAGE_NAME

            # test base image
            docker run $CUSTOM_IMAGE_NAME echo "TEST ECHO: test custom docker image"

  # Push custom image to GitHub Packages.
  custom-push:
    # Ensure test job passes before pushing image.
    needs: custom-build-test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build base image
        run: docker build . --file $CUSTOM_DOCKER_FILE --tag $CUSTOM_IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push base image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$CUSTOM_IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $CUSTOM_IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
